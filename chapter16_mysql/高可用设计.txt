Mysql复制功能介绍
1.提供分担读负载,优点是:分担读负载,备库+数据库+备库(为高可用丶灾难恢复丶备份提供更多的选择)
2.二进制日志,复制是异步的
复制解决了哪些问题?
答:实现在不同服务器上数据分布;利用二进制日志增量进行
    2.实现数据读取的负载均衡(需要其他组件配合完成,利用DNS轮询的方式把程序的读链接到不同的备份数据库,使用
        LVS,haproxy这样的代理方式,非共享架构,同样的数据分布在多台服务器上)
    3.增强了数据的安全性(利用备库来减少主库负载)
    4.实现数据库高考用和故障切换
    5.实现数据库在线升级

mysql二进制日志:
    1.服务层日志(包含二进制日志)
    2.存储引擎层日志
    二进制日志是:
        记录了所有对mysql数据库的修改事件,包括增删查改和对表结构的修改事件

    binlog命令行工具:操作二进制内容
        二进制日志的格式:
            基于段的格式 binlog_format = STATEMENT
            ---优点:日志记录量相对较小,节约磁盘及网络I/O(取决与sql)
            ---缺点:必须要记录上下文信息;可能造成mysql复制的主备服务器数据不一致;

Mysql复制工作方式：
    1.主~ 将变更 写入二进制日志
    2.从~ 读取 主~的 二进制日志 变更并写入到relay_log中；
        基于日志点的复制
        基于GTID的复制
    3.从（服务器）上重放relay_log中的日志
        基于SQL段的日志是在从库上重新执行记录的SQL
        基于行的日志则是从库上直接运用对数据库的修改

    mysql配置复制：
    基于日志点的复制配置步骤：
        第一步：在主DB服务器上建立复制账号
        create user reql@'IP段' identified by 'Password';
        grant replication slave on *.* To repl@'IP段';
        第二步：配置主数据库服务器
            bin_log = mysql-bin
            server_id = 100
        第三部： 配置从数据库服务器
            bin_log = mysql-bin
            server_id = 101
            relay_log = mysql-relay-bin
            两个可选参数
            log_slave_update = on
            read_only = on [可选]

        第四部：
            初始化从服务器数据
            (下方是逻辑复制)
            mysqldump --master-data=2 -single-transaction
            (宁一种备份工具,是热备份)
            xtrabackup --slave-info
        第五步：启动复制链路
            change master to master_host = 'master_host_ip',master_user='repl',
                                            master_password='pwd', master_log_file='mysql_log_file_name',
                                            master_log_pos = 4;

        实践：
            scp是远程安全的复制
            rcp是非安全远程复制
            然后将sql文件导入到表中：
                mysql -uroot -p < all.sql
            启动链路：
                start slave
            查看线程：show proccesslist

        基于日志点的复制优点：
            1.mysql是最早支持的复制技术，bug少
            2.对sql查询没有任何限制
            3.故障处理比较容易
            缺点和不足：
                1.故障转移是重新获取新主的日志信息比较困难
        基于GTID复制的优缺点：
            优点：
            1.从库已执行的事务的GTID的值
            2.从库未执行的事务的GTID的值
            什么事GTID？
                GTID及全局事务id，其保证未每一个在主上提交的事务在复制集群中可以生产一个唯一的ID
                GTID = source_id:transaction_id
        第一步：
            在主DB服务器上建立复制账号
            create user reql@'IP段' identified by 'Password';
            grant replication slave on *.* To repl@'IP段';
        第二步：主库的数据库服务器配置
            bin_log = /usr/local/mysql/log/mysql-bin
            server_id = 100
            gtid_mode = on [是否启动GTID模式]
            enforce-gtid-consiste
            log-slave-updates = on [5.7以上可以不使用]
        第三部:从库的数据库服务器配置
            server_id = 101
            relay_log = /usr/local/mysql/log/relay_log
            gtid_mode = on
            enforce-gtid-consistency
            建议配置参数：
            read_only = on [建议]
            master_info_repository = TABLE [建议]
            relay_log_info_repository = TABLE [建议]
        第四部：
            对从数据库进行服务器数据初始化
            (记录备份时最后的事务的GTID的值)
            mysqldump --master-data=2 -single-transaction ...（其他的参数）
        第五步：启动基于GTID的复制
            change master to master_host = '',master_user='', master_password='',
                              master_auto_position = 1
        GTID的优点：
            1.可以很方便的进行故障转移
            2.从库不会丢失主库上的任何修改
            缺点和不足：
            1.故障处理比较复杂
            2.对执行的SQl有一定的限制
如何选择我嗯呢的复制模式：
    1.查看自己使用的mysql 的版本，5.6版本之前的就是
    2.复制架构及主从切换的方式
    3.所使用的高可用管理组件，
    4.应用是否可以适应我们的数据库集群中，兼容性比较重要


