影响数据库性能的因素：
    1.服务器硬件
    2.操作系统
    3.mysql服务器配置
    逻辑设计和物理设计大幅度影响数据库性能；
        1.查询语句尽量简单
    优化结构目的：
        a.减少数据的冗余
        b.尽量避免数据维护中出现更新，插入和删除异常
        插入异常：如果表中的某个实体随着另一个实体而存在
        更新异常：如果更改表中的某个实体的单独属性时，需要对多行进行更新
        删除异常：如果删除表中的某一实体则会导致其他实体的消失
        c.节约数据存储空间
        d.提高查询效率
数据库的结构设计的步骤：
    需求分析：全面了解产品设计的存储需求,数据处理需求，数据的安全性和完整性
    逻辑设计：设计数据的逻辑存储结构
            数据实体之间的逻辑关系，解决数据冗余和数据维护异常
            （按照数据库范式）
    物理设计：根据所使用的数据库特点进行表结构设计
        关系型数据库：Oralce，sql server，mysql，
        非关系型数据库：mangodb，redis，hadoop
    维护优化：对索引和存储结构进行优化
数据三范式：
    数据库第一范式：
        数据库表中的所有字段都只局域单一属性
        单一属性的列是由基本的数据类型所构成
        是一章二维表
    数据库第二范式：
        要求一个表中只具有一个业务主键，不能存在非主键列对只部分主键的依赖关系
    数据库第三范式：
        指每一个非主属性性既不部分依赖于也不传递依赖于业务主键，也就是在第二范式的基础上消除了非
        主属性对主键的传递依赖

需求分析和逻辑设计：
    举个例子：电子商务网站的数据库结构
        1.本网站只销售图书类商品
        2.需要具备一下功能
            用户登录丶商品展示丶供应商管理丶用户管理丶商品管理丶在线销售
        用户登录以及用户管理功能
            用户必须登录系统才能进行网上交易
            同一时间一个用户只能能在一个地方登录
            用户信息：（业务主键）用户名丶密码丶手机号丶姓名丶注册日期丶在线状态丶出生日期
        商品展示及商品管理功能模块：
            商品信息：{商品名称，分类名称，出版社名称，图书价格，图书描述，作者}
            可以拆分为三张表：
                商品信息：{商品名称，出版社名称，图书价格，图书描述，作者}
                分类信息：{分类名称，分类描述}
                商品分类（对应关系表）：{商品名称，分类名称}
        供应商管理功能：
            供应商信息：{出版社名称，地址，电话，联系人，银行账号}
        在线销售功能（功能）：
        在线销售：{订单编号,下单用户名，下单日期，订单金额，订单商品分类，订单商品名，订单商品单价，订单数量。。。}
        分为两张表：
            订单表：{订单编号，下单用户名，下单日期，支付金额，物流单号}
            订单商品关联表：{订单编号，订单商品分类，订单商品名，商品数量}

范式化设计的优缺点：
    优点：
        可以尽量的减少数据的冗余
        范式化的更新操作比反范式化更快
        范式化的表通常比反范式化更小
    缺点：
        对于查询需要对多个表进行关联
        更难进行索引优化
反范式化的优缺点;
    有点：
        可以减少表的关联
    缺点：
        存在数据冗余及数据维护异常
        对数据的修改需要更多的成本
最好的办法是:结合范式化和反范式化的进行设计；高性能数据库结构；

# ==========================
物理设计：
    第一步：定义数据库丶表及字段的命名规范
    1.可读性原则
    2.要遵守表意性原则
    3.长名原则，尽量不要缩写，但是也不要太长
    第二步：选择合适的存储引擎
    MyISAM:表级锁
    主要应用：SELECT，INSERT，读写操作频繁
    MRG_MYISAM,支持并发插入的表级锁,分段归档，数据仓库
    Innodb：支持，支持MVCC的行级锁，事务处理
    Archive：不支持，行级锁，日志记录，只支持insert，select，（需要随机读取更新，删除）
    Ndb cluster：支持，行级锁，高可用性，（大部分应用不建议其使用）

    第三部：
        为表中的字段选择合适的数据类型
        选择数据类型的原则：
            当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或二进制类型，
            最后是字符类型，对于相同级别的数据类型，应该优先选择占用空间小的数据类型
        tinyint:1字节（存储空间），-128-127；unsigned：0-255
        smallint：2字节，-32768-32767；unsigned：0-65535
        mediumint：3字节，-8388608-8388607,；unsigned：0-16777215
        int：4字节，unsigned：0-4294967295；
        bigint：8字节
        实数类型L
            float:4字节
            double：8字节
            decimal：每4个字节存9个数字，小数点占用一个字节
        字符串类型：
            varchar和char
            varchar存储类型：是变长字符串，只占用必要的存储空间
            列的最大长度小于255则只占用一个额外字节用于记录字符串长度
            列的最大长度 大 于255则就占用 两 个额外字节用于记录字符串长度
            原则是：
                使用最小的符合需求的长度
            varchar（5）和varchar（200）存储‘mysql’字符串类型
            varchar的使用场景：
                最大长度比凭据长度大很多
                字符串很少被更新
                使用了多字节字符集存储字符串
            char：定长的
            char的使用场景：
                char类型适合存储所长度近似的值
                长度较短的类型

        如何存储日期数据
            一：datatime类型：以YYYY-MM-DD HH：MM：SS[.fraction]格式存储日期时间
            datatime类型与时区无关，占用8个字节的存储空间
            时间范围：1000-01-01 00:00:00到9999-12-31
            二：timestamp类型：时间戳
            存储了格林泥质时间1970,1,1到当前时间的秒数，占用4个字节
            最多是1970-01-01到2038-01-19
            timestamp类型依赖所指定的时区
            在行的数据修改时可以自动修改timestamp列的值
        mysql设置时区：set time_zone = '+10:00'
            存储微妙级对比：
                修改他们数据结构的datetime(6),timestamp(6)保留6位

            data和time类型：
            只保存日期或者时间类型
            date类型的优点：
            1.占用的字节数比使用字符串丶datetime丶int要少，使用date类型只需要3个字节
            2.使用Date类型还可以利用日期时间函数进行日期之间的计算
            注意事项：
                1.不要使用字符串类型来存储日期时间数据
                2.日期时间类型通常比字符串占用的存储空间小
                3.日期时间类型进行查找过滤式可以利用日期进行对比
                4.尽量使用时间类型来存储时间
